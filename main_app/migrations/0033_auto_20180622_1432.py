# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-06-22 18:32
from __future__ import unicode_literals

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('main_app', '0032_pursuitprogress'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cooking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.now)),
                ('rating', models.DecimalField(decimal_places=1, default=3, max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('calories', models.IntegerField(blank=True, null=True)),
                ('total_fat', models.IntegerField(blank=True, null=True)),
                ('saturated_fat', models.IntegerField(blank=True, null=True)),
                ('cholesterol', models.IntegerField(blank=True, null=True)),
                ('total_carbs', models.IntegerField(blank=True, null=True)),
                ('dietary_fiber', models.IntegerField(blank=True, null=True)),
                ('total_sugars', models.IntegerField(blank=True, null=True)),
                ('added_sugars', models.IntegerField(blank=True, null=True)),
                ('protein', models.IntegerField(blank=True, null=True)),
                ('vitamin_a', models.IntegerField(blank=True, null=True)),
                ('vitamin_c', models.IntegerField(blank=True, null=True)),
                ('vitamin_d', models.IntegerField(blank=True, null=True)),
                ('vitamin_e', models.IntegerField(blank=True, null=True)),
                ('vitamin_k', models.IntegerField(blank=True, null=True)),
                ('vitamin_b1', models.IntegerField(blank=True, null=True)),
                ('vitamin_b2', models.IntegerField(blank=True, null=True)),
                ('vitamin_b3', models.IntegerField(blank=True, null=True)),
                ('vitamin_b5', models.IntegerField(blank=True, null=True)),
                ('vitamin_b6', models.IntegerField(blank=True, null=True)),
                ('vitamin_b9', models.IntegerField(blank=True, null=True)),
                ('vitamin_b12', models.IntegerField(blank=True, null=True)),
                ('biotin', models.IntegerField(blank=True, null=True)),
                ('choline', models.IntegerField(blank=True, null=True)),
                ('calcium', models.IntegerField(blank=True, null=True)),
                ('chromium', models.IntegerField(blank=True, null=True)),
                ('copper', models.IntegerField(blank=True, null=True)),
                ('fluoride', models.IntegerField(blank=True, null=True)),
                ('iodine', models.IntegerField(blank=True, null=True)),
                ('iron', models.IntegerField(blank=True, null=True)),
                ('magnesium', models.IntegerField(blank=True, null=True)),
                ('manganese', models.IntegerField(blank=True, null=True)),
                ('molybdenum', models.IntegerField(blank=True, null=True)),
                ('phosphorus', models.IntegerField(blank=True, null=True)),
                ('selenium', models.IntegerField(blank=True, null=True)),
                ('zinc', models.IntegerField(blank=True, null=True)),
                ('potassium', models.IntegerField(blank=True, null=True)),
                ('sodium', models.IntegerField(blank=True, null=True)),
                ('chloride', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodStock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty_num', models.IntegerField()),
                ('qty_lbs', models.DecimalField(decimal_places=2, max_digits=5)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.FoodItem')),
            ],
        ),
        migrations.CreateModel(
            name='GroceryPurchase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.now)),
                ('store', models.TextField()),
                ('receipt_name', models.TextField(blank=True, null=True)),
                ('unit_pieces', models.IntegerField(blank=True, null=True)),
                ('unit_lbs', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('price_per_unit', models.DecimalField(decimal_places=2, max_digits=5)),
                ('discount_per_unit', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('qty', models.IntegerField()),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.FoodItem')),
            ],
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.now)),
                ('eat_time', models.TimeField()),
                ('location', models.TextField()),
                ('cost', models.DecimalField(decimal_places=2, max_digits=8)),
                ('rating', models.DecimalField(decimal_places=1, default=3, max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('foods', models.ManyToManyField(to='main_app.FoodItem')),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('url', models.TextField(blank=True, null=True)),
                ('details', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RecipeIngredients',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_qty', models.DecimalField(decimal_places=2, max_digits=5)),
                ('item_unit', models.TextField()),
                ('details', models.TextField(blank=True, null=True)),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.FoodItem')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.Recipe')),
            ],
        ),
        migrations.AddField(
            model_name='recipe',
            name='ingredients',
            field=models.ManyToManyField(through='main_app.RecipeIngredients', to='main_app.FoodItem'),
        ),
        migrations.AddField(
            model_name='meal',
            name='recipes',
            field=models.ManyToManyField(to='main_app.Recipe'),
        ),
        migrations.AddField(
            model_name='cooking',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.Recipe'),
        ),
    ]
